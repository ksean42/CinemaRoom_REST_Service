type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Error.java
  visible: true
  text: |
    package cinema;

    public enum Error {
        OUT_OF_BOUNDS("The number of a row or a column is out of bounds!"),
        NOT_AVAILABLE_TICKET("The ticket has been already purchased!"),
        WRONG_TOKEN("Wrong token!"),
        WRONG_PASSWORD("The password is wrong!");

        String error;

        Error(String error) {
            this.error = error;
        }

        @Override
        public String toString() {
            return this.error;
        }
    }
  learner_created: true
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    kdkfskdf
    </body>
    </html>
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.sql.Timestamp;
    import java.util.*;

    class Seat {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        boolean purchased;
        @JsonIgnore
        private UUID accessToken;
        private Timestamp tokenCreationTime;
        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            price = row <= 4 ? 10 : 8;
            purchased = false;
            this.accessToken = null;
        }

        public int getColumn() {
            return column;
        }

        public int getRow() {
            return row;
        }

        public int getPrice() {
            return price;
        }

        @JsonIgnore
        public boolean tokenExpired() {
            Timestamp currTime = new Timestamp(System.currentTimeMillis());
            long time = currTime.getTime() - this.tokenCreationTime.getTime();
            time = time/1000;
            if(time > 3600)
                return true;
            else
                return false;
        }
        public UUID getAccessToken() {
                return accessToken;
        }

        public void setAccessToken() {
            if (this.accessToken == null) {
                this.accessToken = UUID.randomUUID();
                this.tokenCreationTime = new Timestamp(System.currentTimeMillis());
            }
        }
        public void resetAccessToken() {
            this.accessToken = null;
        }

        public boolean equals(Seat seat) {
            return (seat.row == this.row && seat.column == this.column);
        }
    }

    public class Cinema {
        private int total_rows;
        private int total_columns;
        List<Seat> available_seats;

        public Cinema() {
            total_rows = 9;
            total_columns = 9;
            available_seats = new ArrayList<>();
            initSeats();
        }
        public Cinema(int rows, int columns) {
            total_rows = rows;
            total_columns = columns;
            available_seats = new ArrayList<>();
            initSeats();
        }
        public void initSeats() {
            for(int i = 1; i <= total_rows; i++) {
                for(int j = 1; j <= total_columns; j++) {
                    available_seats.add(new Seat(i, j));
                }
            }
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public int getTotal_rows() {
            return total_rows;
        }

    }
  learner_created: true
- name: src/cinema/Statistics.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.List;
    import java.util.Map;

    public class Statistics {
        @JsonProperty("current_income")
        int currentIncome;
        @JsonProperty("number_of_available_seats")
        int numberOfAvailableSeats;
        @JsonProperty("number_of_purchased_tickets")
        int numberOfPurchasedTickets;

        public Statistics(Cinema cinema) {
            currentIncome = getCurrentIncome(cinema.getAvailable_seats());
            numberOfAvailableSeats = getNumberOfAvailableSeats(cinema.getAvailable_seats());
            numberOfPurchasedTickets = cinema.getAvailable_seats().size() - numberOfAvailableSeats;
        }

        private int getCurrentIncome(List<Seat> seatList) {
            int income = 0;
            for(Seat s : seatList) {
                    if(s.purchased) {
                        income += s.getPrice();
                    }
                }
            return income;
            }

            private int getNumberOfAvailableSeats(List<Seat> seatList) {
            int numberOfSeats = 0;
            for(Seat s : seatList) {
                if(!s.purchased) {
                    numberOfSeats += 1;
                }
            }
            return numberOfSeats;
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.*;


    @RestController
    public class CinemaController {
        private final Cinema cinema = new Cinema(9, 9);

        @GetMapping("/seats")
        public Cinema getSeatsInfo() {
            return cinema;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchase(@RequestBody Seat seat) {
            int row = seat.getRow();
            int column = seat.getColumn();
            Map<String, Object> resp = new LinkedHashMap<>();
            if(row <= 0 || row > cinema.getTotal_rows()
                    || column <= 0 || column > cinema.getTotal_columns()) {
                return new ResponseEntity<>(Map.of("error", Error.OUT_OF_BOUNDS.toString()),
                        HttpStatus.BAD_REQUEST);
            }

            for(Seat s : cinema.available_seats) {
                if(s.equals(seat)){
                    if(s.purchased) {
                        return new ResponseEntity<>(Map.of("error", Error.NOT_AVAILABLE_TICKET.toString()), HttpStatus.BAD_REQUEST);
                    }
                    s.setAccessToken();
                    resp.put("token", s.getAccessToken());
                    resp.put("ticket", s);
                    s.purchased = true;
                    return new ResponseEntity<>(resp, HttpStatus.OK);
                }
            }

            return new ResponseEntity<>(resp, HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<?> getTicket(@RequestBody Map<String, String> request) {
            UUID token;

            try {
                token = UUID.fromString(request.get("token"));
            } catch (IllegalArgumentException e) {
                return new ResponseEntity<>(Map.of("error", Error.WRONG_TOKEN.toString()), HttpStatus.BAD_REQUEST);
            }

            for(Seat s : cinema.available_seats) {
                if(token.equals(s.getAccessToken()) && !s.tokenExpired()) {
                    s.purchased = false;
                    s.resetAccessToken();
                    return new ResponseEntity<>(Map.of("returned_ticket", s), HttpStatus.OK);
                }
            }
            return new ResponseEntity<>(Map.of("error", Error.WRONG_TOKEN.toString()), HttpStatus.BAD_REQUEST);
        }

        @PostMapping("/stats")
        public ResponseEntity<?> getStats(@RequestParam String password) {
            if(password.equals("super_secret")) {
                return new ResponseEntity<>(new Statistics(cinema), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(Map.of("error", Error.WRONG_PASSWORD.toString()), HttpStatus.valueOf(401));
            }

        }
    }
    /*TODO: Use threadsafe objects, e.g.
        import java.util.concurrent.ConcurrentHashMap;
        import java.util.concurrent.ConcurrentMap;

        new entity for ticket?
        available_seats
    */
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 27 Jun 2022 09:00:04 UTC
record: -1
